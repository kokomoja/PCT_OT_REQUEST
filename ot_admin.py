from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QTableWidget, QTableWidgetItem, 
    QPushButton, QHBoxLayout, QMessageBox, QLineEdit, QLabel,
    QCheckBox, QComboBox, QDateEdit, QHeaderView
)
from PyQt5.QtCore import Qt, QTimer, QDate, QLocale
from PyQt5.QtGui import QColor
from db import get_all_ot_requests, update_ot_status, update_ot_detail
from utils import thai_to_arabic, confirm_dialog


class OTAdminForm(QWidget):
    def __init__(self, admin_code):
        super().__init__()
        self.setWindowTitle("‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠ OT (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin)")
        self.resize(1450, 700)
        self.admin_code = admin_code

        layout = QVBoxLayout()
        layout.setContentsMargins(5, 5, 5, 5)
        layout.setSpacing(10)

        # === Filter Row ===
        filter_row = QHBoxLayout()
        filter_row.setAlignment(Qt.AlignLeft)
        filter_row.setSpacing(15)
        filter_row.setContentsMargins(0, 0, 0, 0)

        # --- Filter: ‡πÅ‡∏ú‡∏ô‡∏Å (ComboBox) ---
        lbl_dept = QLabel("‡πÅ‡∏ú‡∏ô‡∏Å:")
        self.cbb_dept = QComboBox()
        self.cbb_dept.setFixedWidth(180)
        filter_row.addWidget(lbl_dept)
        filter_row.addWidget(self.cbb_dept)

        # --- Filter: ‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô (ComboBox) ---
        lbl_name = QLabel("‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:")
        self.cbb_name = QComboBox()
        self.cbb_name.setFixedWidth(200)
        filter_row.addWidget(lbl_name)
        filter_row.addWidget(self.cbb_name)

        # --- Filter: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ---
        lbl_from = QLabel("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà:")
        self.date_from = QDateEdit(calendarPopup=True)
        self.date_from.setDate(QDate.currentDate().addDays(-7))
        self.date_from.setDisplayFormat("yyyy-MM-dd")
        self.date_from.setFixedWidth(120)

        lbl_to = QLabel("‡∏ñ‡∏∂‡∏á:")
        self.date_to = QDateEdit(calendarPopup=True)
        self.date_to.setDate(QDate.currentDate())
        self.date_to.setDisplayFormat("yyyy-MM-dd")
        self.date_to.setFixedWidth(120)

        # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏•‡∏Ç‡∏≠‡∏≤‡∏£‡∏ö‡∏¥‡∏Å
        locale = QLocale(QLocale.English, QLocale.UnitedStates)
        self.date_from.setLocale(locale)
        self.date_to.setLocale(locale)

        filter_row.addWidget(lbl_from)
        filter_row.addWidget(self.date_from)
        filter_row.addWidget(lbl_to)
        filter_row.addWidget(self.date_to)

        # --- Filter: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ---
        lbl_status = QLabel("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:")
        self.cmb_status = QComboBox()
        self.cmb_status.addItems(["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "Pending", "Approved", "Rejected"])
        self.cmb_status.setFixedWidth(120)
        filter_row.addWidget(lbl_status)
        filter_row.addWidget(self.cmb_status)

        # --- ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå ---
        self.btn_clear = QPushButton("üßπ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á")
        self.btn_clear.setFixedWidth(140)
        self.btn_clear.clicked.connect(self.clear_filters)
        filter_row.addWidget(self.btn_clear)

        layout.addLayout(filter_row)

        # === Table ===
        self.table = QTableWidget()
        self.table.setColumnCount(13)
        self.table.setHorizontalHeaderLabels([
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", "ID", "‡∏£‡∏´‡∏±‡∏™", "‡∏ä‡∏∑‡πà‡∏≠", "‡πÅ‡∏ú‡∏ô‡∏Å", "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á",
            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°", "‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•", "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô",
            "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "‡∏™‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"
        ])
        self.table.setColumnWidth(0, 40)
        self.table.setColumnWidth(6, 60)
        self.table.setColumnWidth(7, 60)
        self.table.setColumnWidth(8, 60)
        self.table.setColumnWidth(9, 200)
        self.table.setColumnWidth(10, 200)
        self.table.setAlternatingRowColors(True)
        layout.addWidget(self.table)

        # === Buttons Row ===
        btn_row = QHBoxLayout()
        btn_row.setAlignment(Qt.AlignLeft)
        btn_row.setSpacing(15)
        btn_row.setContentsMargins(0, 0, 0, 0)
        
        # --- ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á ‡πÜ ---
        self.btn_approve = QPushButton("‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        self.btn_approve.setFixedSize(180, 40)
        self.btn_approve.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                font-size: 12pt;
                font-weight: bold;
                border-radius: 6px;
            }
            QPushButton:hover { background-color: #43A047; }
        """)

        self.btn_reject = QPushButton("‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        self.btn_reject.setFixedSize(180, 40)
        self.btn_reject.setStyleSheet("""
            QPushButton {
                background-color: #F44336;
                color: white;
                font-size: 16pt;
                font-weight: bold;
                border-radius: 6px;
            }
            QPushButton:hover { background-color: #D32F2F; }
        """)

        self.btn_update = QPushButton("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
        self.btn_update.setFixedSize(200, 40)
        self.btn_update.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                font-size: 16pt;
                font-weight: bold;
                border-radius: 6px;
            }
            QPushButton:hover { background-color: #1976D2; }
        """)

        self.btn_reset = QPushButton("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô Pending")
        self.btn_reset.setFixedSize(200, 40)
        self.btn_reset.setStyleSheet("""
            QPushButton {
                background-color: #FF9800;
                color: white;
                font-size: 16pt;
                font-weight: bold;
                border-radius: 6px;
            }
            QPushButton:hover { background-color: #FB8C00; }
        """)

        # --- Label + Input ---
        lbl_reason = QLabel("‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò:")
        lbl_reason.setAlignment(Qt.AlignVCenter | Qt.AlignLeft)  # ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢
        lbl_reason.setFixedWidth(110)

        self.reject_reason = QLineEdit()
        self.reject_reason.setPlaceholderText("‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)")
        self.reject_reason.setFixedSize(400, 40)
        self.reject_reason.setAlignment(Qt.AlignLeft)  # ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢
        self.reject_reason.setStyleSheet("""
            QLineEdit {
                font-size: 16pt;
                padding: 6px;
                border: 1px solid #ccc;
                border-radius: 6px;
            }
        """)

        # --- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ---
        self.btn_approve.clicked.connect(self.approve_request)
        self.btn_reject.clicked.connect(self.reject_request)
        self.btn_update.clicked.connect(self.update_detail_request)
        self.btn_reset.clicked.connect(self.reset_status_request)

        # --- ‡πÄ‡∏û‡∏¥‡πà‡∏° widgets ‡πÄ‡∏Ç‡πâ‡∏≤ layout ---
        btn_row.addWidget(self.btn_approve)
        btn_row.addWidget(self.btn_reject)
        btn_row.addWidget(self.btn_update)
        btn_row.addWidget(self.btn_reset)
        btn_row.addWidget(lbl_reason)
        btn_row.addWidget(self.reject_reason)

        # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° stretch ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏±‡∏ô‡∏ä‡πà‡∏≠‡∏á drift ‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤
        btn_row.addStretch(1)
        layout.addLayout(btn_row)

        self.setLayout(layout)

        # === Event binding ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ===
        self.cmb_status.currentIndexChanged.connect(self.load_requests)
        self.cbb_dept.currentIndexChanged.connect(self.load_requests)
        self.cbb_name.currentIndexChanged.connect(self.load_requests)
        self.date_from.dateChanged.connect(self.load_requests)
        self.date_to.dateChanged.connect(self.load_requests)

        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
        self.load_requests()

        # Auto refresh ‡∏ó‡∏∏‡∏Å 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.load_requests)
        self.timer.start(60000)

    # ---------- Helper: ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô ComboBox ----------
    def populate_filter_options(self, base_rows):
        """‡πÄ‡∏ï‡∏¥‡∏° cbb_dept ‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏ú‡∏ô‡∏Å ‡πÅ‡∏•‡∏∞ cbb_name ‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"""
        prev_dept = self.cbb_dept.currentText() if self.cbb_dept.count() else "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
        prev_name = self.cbb_name.currentText() if self.cbb_name.count() else "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"

        dept_set, name_set = set(), set()
        for r in base_rows:
            if r[3] and str(r[3]).strip():
                dept_set.add(str(r[3]).strip())
            if r[2] and str(r[2]).strip():
                name_set.add(str(r[2]).strip())

        depts = sorted(dept_set)
        names = sorted(name_set)

        self.cbb_dept.blockSignals(True)
        self.cbb_name.blockSignals(True)

        self.cbb_dept.clear()
        self.cbb_dept.addItem("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        self.cbb_dept.addItems(depts)

        self.cbb_name.clear()
        self.cbb_name.addItem("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        self.cbb_name.addItems(names)

        if prev_dept in depts or prev_dept == "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            self.cbb_dept.setCurrentText(prev_dept)
        if prev_name in names or prev_name == "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            self.cbb_name.setCurrentText(prev_name)

        self.cbb_dept.blockSignals(False)
        self.cbb_name.blockSignals(False)

    # ---------- ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ----------
    def load_requests(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏Ç‡∏≠ OT ‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)"""
        status = self.cmb_status.currentText()
        if status == "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            status = None

        date_from = thai_to_arabic(self.date_from.date().toString("yyyy-MM-dd"))
        date_to = thai_to_arabic(self.date_to.date().toString("yyyy-MM-dd"))

        rows = get_all_ot_requests(status)

        base_rows = []
        for row in rows:
            ot_date = thai_to_arabic(str(row[5]))  # ot_date index=5
            if date_from <= ot_date <= date_to:
                base_rows.append(row)

        # ‡πÄ‡∏ï‡∏¥‡∏° combo options ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        self.populate_filter_options(base_rows)

        sel_dept = self.cbb_dept.currentText().strip()
        sel_name = self.cbb_name.currentText().strip()

        filtered_rows = []
        for r in base_rows:
            dept = str(r[3]).strip() if r[3] else ""
            name = str(r[2]).strip() if r[2] else ""
            if sel_dept != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" and dept != sel_dept:
                continue
            if sel_name != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" and name != sel_name:
                continue
            filtered_rows.append(r)

        # ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        self.table.setRowCount(len(filtered_rows))
        for i, row in enumerate(filtered_rows):
            checkbox = QCheckBox()
            checkbox.setStyleSheet("margin-left:10px;")
            self.table.setCellWidget(i, 0, checkbox)

            for j, value in enumerate(row[:-1]):
                val = thai_to_arabic(str(value))
                item = QTableWidgetItem(val)
                item.setTextAlignment(Qt.AlignCenter)
                if j in [6, 7, 8, 9]:
                    item.setFlags(item.flags() | Qt.ItemIsEditable)
                else:
                    item.setFlags(item.flags() & ~Qt.ItemIsEditable)
                self.table.setItem(i, j + 1, item)

            status_val = str(row[-1])
            item_status = QTableWidgetItem(status_val)
            item_status.setTextAlignment(Qt.AlignCenter)
            item_status.setFlags(item_status.flags() & ~Qt.ItemIsEditable)
            self.table.setItem(i, 11, item_status)

            color_item = QTableWidgetItem(status_val)
            color_item.setTextAlignment(Qt.AlignCenter)
            if status_val == "Approved":
                color_item.setBackground(QColor(0, 170, 0))
                color_item.setForeground(QColor(255, 255, 255))
            elif status_val == "Rejected":
                color_item.setBackground(QColor(200, 0, 0))
                color_item.setForeground(QColor(255, 255, 255))
            else:
                color_item.setBackground(QColor(255, 235, 59))
                color_item.setForeground(QColor(0, 0, 0))
            color_item.setFlags(color_item.flags() & ~Qt.ItemIsEditable)
            self.table.setItem(i, 12, color_item)

        self.table.resizeColumnsToContents()

        # ‚úÖ ‡∏•‡πá‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å" ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏î‡πâ
        header = self.table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Fixed)
        self.table.setColumnWidth(0, 30)
        
        

    # ---------- ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå ----------
    def clear_filters(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        self.cbb_dept.blockSignals(True)
        self.cbb_name.blockSignals(True)

        self.cbb_dept.clear()
        self.cbb_name.clear()
        self.cbb_dept.addItem("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        self.cbb_name.addItem("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        self.cbb_dept.setCurrentIndex(0)
        self.cbb_name.setCurrentIndex(0)

        self.cmb_status.setCurrentIndex(0)
        self.date_from.setDate(QDate.currentDate().addDays(-7))
        self.date_to.setDate(QDate.currentDate())

        self.cbb_dept.blockSignals(False)
        self.cbb_name.blockSignals(False)

        self.load_requests()

    # ---------- Helper ----------
    def get_selected_request_ids(self):
        selected = []
        for i in range(self.table.rowCount()):
            chk = self.table.cellWidget(i, 0)
            if chk and chk.isChecked():
                req_id = int(self.table.item(i, 1).text())
                selected.append((i, req_id))
        return selected

    # ---------- Actions ----------
    def approve_request(self):
        selected = self.get_selected_request_ids()
        if not selected:
            QMessageBox.warning(self, "‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠ OT")
            return
        if not confirm_dialog(self, "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", f"‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ {len(selected)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"):
            return
        for _, req_id in selected:
            update_ot_status(req_id, "Approved", self.admin_code, None)
        QMessageBox.information(self, "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ")
        self.load_requests()

    def reject_request(self):
        selected = self.get_selected_request_ids()
        if not selected:
            QMessageBox.warning(self, "‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠ OT")
            return
        reason = self.reject_reason.text().strip() or "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
        if not confirm_dialog(self, "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", f"‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò {len(selected)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"):
            return
        for _, req_id in selected:
            update_ot_status(req_id, "Rejected", self.admin_code, reason)
        QMessageBox.information(self, "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚ùå")
        self.load_requests()

    def reset_status_request(self):
        selected = self.get_selected_request_ids()
        if not selected:
            QMessageBox.warning(self, "‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠ OT ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï")
            return
        if not confirm_dialog(self, "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", f"‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï {len(selected)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô Pending ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"):
            return
        for _, req_id in selected:
            update_ot_status(req_id, "Pending", self.admin_code, None)
        QMessageBox.information(self, "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ")
        self.load_requests()

    def update_detail_request(self):
        selected = self.get_selected_request_ids()
        if not selected:
            QMessageBox.warning(self, "‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠ OT ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
            return
        if not confirm_dialog(self, "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", f"‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç {len(selected)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"):
            return
        for row_idx, req_id in selected:
            start_time = self.table.item(row_idx, 7).text()
            end_time = self.table.item(row_idx, 8).text()
            reason = self.table.item(row_idx, 9).text()
            jobdesc = self.table.item(row_idx, 10).text()
            update_ot_detail(req_id, start_time, end_time, reason, jobdesc)
        QMessageBox.information(self, "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ")
        self.load_requests()
